name: Web 📄 Test 🦂 Build 🧱 Release 🚰 and Publish 📦
on:
  push:
    branches:
    - 'main'
    paths:
    - 'web/**'
    # - '!web/**.md' usually we ignore these by .md are the source for this.
    - '.github/workflows/web-*'
  workflow_dispatch:
permissions: {}
defaults:
  run:
    shell: bash
    working-directory: web
env:
  development_python_version: 3.12.3
jobs:
  test:
    name: Test 🦂
    permissions:
      actions: read
      contents: read
      security-events: write
    uses: ./.github/workflows/web-test.yaml
  workflow-conditions:
    name: 🛑🛑🛑 Stop builds that didn't change the release version 🛑🛑🛑
    runs-on: ubuntu-latest
    outputs:
      version-file-changed: ${{ steps.version-file-check.outputs.version-file-changed }}
      version-tag-exists: ${{ steps.version-tag-exists.outputs.version-tag-exists }}
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 2
    - name: Check if version files changed
      id: version-file-check
      run: |
        export VERSION_FILE="web/content/extra/version.html"
        [ "$(git diff HEAD^1.. --name-only | grep -e "^$VERSION_FILE$")" == "$VERSION_FILE" ] && echo "version-file-changed=${{toJSON(true)}}" >> $GITHUB_OUTPUT || echo "version-file-changed=${{toJSON(false)}}" >> $GITHUB_OUTPUT
    - name: Notify on version-file-check
      run: echo "::Notice::version-file-changed is ${{ fromJSON(steps.version-file-check.outputs.version-file-changed) }}"
    - name: Check if version specified in version file has not released.
      id: version-tag-exists
      run: |
        git fetch --tags
        export VER=$(cat content/extra/version.html)
        [ -z "$(git tag -l "web-v$VER")" ] && echo "version-tag-exists=${{toJSON(false)}}" >> $GITHUB_OUTPUT || echo "version-tag-exists=${{toJSON(true)}}" >> $GITHUB_OUTPUT
    - name: Notify on version-tag-exists
      run: echo "::Notice::version-tag-exists is ${{ fromJSON(steps.version-tag-exists.outputs.version-tag-exists) }}"
  # Now any step that should only run on the version change can use
  # "needs: [workflow-conditions]" Which will yield the condition checks below.
  # We want to "release" automatically if "version-file-changed" is true on push
  # Or manually if workflow_dispatch. BOTH need "version-tag-exists" is false.
  build:
    name: Build 🧱
    needs: [test, workflow-conditions]
    if: >-
      ${{ ((fromJSON(needs.workflow-conditions.outputs.version-file-changed) == true && github.event_name == 'push') ||
      github.event_name == 'workflow_dispatch') && fromJSON(needs.workflow-conditions.outputs.version-tag-exists) == false }}
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: 🐍 Set up Python
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
      with:
        python-version: ${{ env.development_python_version }}
    - name: 🧱 Install build dependencies
      run: make setup
    - name: 🦢 Pelican build output
      run: make publish
    - name: 🆙 Upload pelican output
      uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
      with:
        name: pelican-output
        path: web/output/
        if-no-files-found: error
  release:
    name: Release 🚰
    needs: [build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: 🆒 Download dists
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: pelican-output
        path: web/output
    - name: Zip output
      run: tar czvf output.tar.gz output
    - name: 🚰 Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: >-
        export VER=$(cat content/extra/version.html) && 
        gh release create
        web-v$VER
        "output.tar.gz#Pelican Output Tarball"
        --generate-notes
        -t "web: Version $VER"
  # publish:
  #   name: Publish 📦
  #   needs: [release]
  #   runs-on: ubuntu-latest
  #   steps:
  #   # Although the dists are built uses checkout to satisfy refs/tags existence
  #   # which were created by the release, prior to uploading to pypi.
  #   - name: 🏁 Checkout
  #     uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
  #   - name: 🆒 Download dists
  #     uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
  #     with:
  #       name: pelican-output
  #       path: web/output
  #   - run: # publish this to pyscript somehow??
  docs:
    name: Docs 📄
    needs: [release] # publish
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: 🆒 Download dists
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: pelican-output
        path: web/output
    - name: 📄 Docs Publishing
      run: |-
        git config --local user.email "actions@github.com"
        git config --local user.name "Github Actions"
        export SHORTSHA=$(git rev-parse --short HEAD)
        git fetch origin gh-pages-web:gh-pages-web
        git symbolic-ref HEAD refs/heads/gh-pages-web
        cd .. && mv web/output ../MERGE_TARGET
        git rm -rf . && git clean -fxd && git reset
        shopt -s dotglob && mkdir web && mv ../MERGE_TARGET/* web/
        git add .
        git commit -m "Build based on $SHORTSHA" --allow-empty
        git push --set-upstream origin gh-pages-web
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docs-merge:
    name: GitHub 🐱‍👤 Pages 📄 Merger 🧬
    needs: [docs]
    permissions:
      contents: write
      pages: write
      id-token: write
    uses: ./.github/workflows/github-pages.yaml
    with:
      merge_from: 'gh-pages-web'
